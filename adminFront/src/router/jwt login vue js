<template>
  <v-app id="login" :style="{'background-color':$root.themeColor}">
    <v-content>
      <v-container fluid fill-height>
        <v-layout align-center justify-center>
          <v-flex xs12 sm8 md4 lg4>
            <v-card class="elevation-1 pa-3">
              <v-card-text>
                <div class="layout column align-center">
                  <img src="../../assets/logo.png" alt="Partenaire" width="300" height="180">
                  <h1 class="flex my-4" :style="{'color':$root.themeColor}">Partenaire</h1>
                </div>
                <v-form>
                  <v-text-field
                    :color="$root.themeColor"
                    append-icon="person"
                    name="login"
                    label="Utilisateur"
                    type="text"
                    v-model="userEmail"
                    :rules="[rules.required]"
                    @keyup.enter="login"/>
                  <v-text-field
                    append-icon="lock"

                    :color="$root.themeColor"
                    :type="hidePassword ? 'password' : 'text'"
                    name="password" label="Mot de passe"
                    id="password"
                    :rules="[rules.required]"
                    v-model="password"
                    @click:append="hidePassword = !hidePassword"
                    @keyup.enter="login"/>
                </v-form>
              </v-card-text>
              <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn block color="#44a1f5" style="color: white" @click="login(), loading = true" :loading="loading">Connecter</v-btn>
              </v-card-actions>
            </v-card>
          </v-flex>
        </v-layout>
      </v-container>
      <v-snackbar
        v-model="showResult"
        :timeout="10000"
        bottom
        right
        :color="color"
        >
        {{ result }}
      </v-snackbar>
    </v-content>
  </v-app>
</template>

<script>
export default {
  data() {
    return {
      loading: false,
      userEmail: '',
      password: '',
      hidePassword: true,
      error: false,
      color: '',
      showResult: false,
      result: '',
      rules: {
        required: value => !!value || 'Champs obligatoires.'
      }
    }
  },
  mounted() {
    // this.$root.themeColor = '#c8234d'
    // console.log('All Variable: ', this.$store.state);
    this.LogOut();
  },
  methods: {
    LogOut () {
      this.$store.state.access_token = '';
      this.$store.state.expires_in = '';
      this.$store.state.token_type = '';
      this.$store.state.curentUser = {};
      this.$store.state.userIsConnect = false;
      // console.log('this.$store.state: ', this.$store.state);
    },

    getMe () {
      const vm = this;
      let currentUser = {}


      var headers = {
        'Authorization': 'Bearer ' + vm.$store.state.access_token
      };

      // console.log('headers: ', headers);

      vm.axios.post('api/auth/me', {}, {headers: headers}).then((response) => {
        console.log('currentuser:', response.data);

        currentUser = response.data;
        // partenaire = currentUser.partenaire;
        vm.$store.state.curentUser = currentUser

        vm.$store.state.userIsConnect = true;

        if(vm.$store.state.userIsConnect == true){
          vm.$router.push({ name: 'home' });

        }


      })
      .catch((error) => {
        console.log('log: ', error);
      });
    },

    login() {
      console.log('start login')
      const vm = this;

      if (!vm.userEmail || !vm.password) {

        vm.result = "L'utilisateur et mot de passe ne peuvent pas être null.";
        vm.showResult = true;
        vm.color = 'red';

        return;
      }

      var headers = {
        'Content-Type': 'application/json',
        'Authorization': vm.$store.state.token_type + ' ' + vm.$store.state.access_token
      };

      var data = {
        username: vm.userEmail,
        password: vm.password
      };

      console.log(data)

      vm.axios.post('api/auth/login', data )
      .then((response) => {

        //console.log('response.data: ', response.data);

        if (response.data !== 0) {
          vm.$store.state.access_token = response.data.access_token;
          vm.$store.state.expires_in = response.data.expires_in;
          vm.$store.state.token_type = response.data.token_type;
          vm.loading = false;

          vm.getMe();
        } else {
          vm.error = true;
          vm.result = "Votre Compte est désactivé, veuillez contacter l'administrateur";
          vm.showResult = true;
          vm.color = 'red';
          vm.loading = false;
        }

      })
      .catch((error) => {

        console.log('log: ', error);

        vm.error = true;
        vm.result = "L'utilisateur ou mot de passe incorrect.";
        vm.showResult = true;
        vm.color = 'red';
        vm.loading = false;
      });

      /* if (vm.userEmail === vm.$root.userEmail && vm.password === vm.$root.userPassword) {
        vm.$router.push({ name: 'dashboard' });
      }
      else {
        vm.error = true;
        vm.result = "L'utilisateur ou mot de passe incorrect.";
        vm.showResult = true;
        vm.color = 'red';
      } */

    }
  }
}

// this.$root.themeColor
</script>

<style scoped lang="css">
  #login {
    height: 50%;
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
    content: "";
    z-index: 0;
  }
</style>





import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

let setJob = function (jobId){

}


const store = new Vuex.Store({
  state: {
    setJob: setJob,
    access_token: localStorage.getItem('access_token') | '',
    expires_in: localStorage.getItem('expires_in') | '',
    token_type: localStorage.getItem('token_type') | '',
    curentUser: localStorage.getItem('curentUser') | {},
    partenaire: localStorage.getItem('partenaire') | {},
    userIsConnect: localStorage.getItem('userIsConnect') | false,
    path: localStorage.getItem('path') | {},
    rolesPermissions: localStorage.getItem('path') | []
  },
  actions: { },
  mutations: { },
  getters: { }
});

export default store;





import Vue from 'vue';
import Router from 'vue-router';

import dashboard from '../pages/Dashboard.vue';
import Social from '../pages/Social.vue';
import Media from '../pages/Media.vue';
import Snackbar from '../pages/Snackbar.vue';
import Chart from '../pages/Chart.vue';
import Mailbox from '../pages/Mailbox.vue';
import Calendar from '../pages/Calendar.vue';
import Login from '../pages/core/Login.vue';
import home from '../pages/Home.vue';
import Error from '../pages/core/Error.vue';
import Deny from '../pages/core/Deny.vue';

import UProfile from '../components/users/UProfile.vue';

//Telepéage
import Client from '../view/client/index.vue';
import ClientAdd from '../view/client/add.vue';
import ClientUpdate from '../view/client/update.vue';
import Abonnement from '../view/abonnement/index.vue';
import Partenaire from '../view/partenaire/index.vue';


import store from '../store';

const ifAuthenticated = (to, from, next) => {

    if (!store.state.userIsConnect) {
        console.log('not connected');
        next('/login');

        //  next('/403');
        return;
    }

    if (store.state.userIsConnect) {
        next();
        return;
    }
    next('/login');

};


const ifSimpleAuthenticated = (to, from, next) => {

    if (store.state.userIsConnect) {
        next();
        return;
    }
    next('/login');

};

const ifRoleExist = (to, from, next) => {

    if (!store.state.userIsConnect) {
        next('/login');

    }

    if (store.state.userIsConnect) {
        next();
        return;
    }
    next('/login');

};




Vue.use(Router);

export default new Router({
    base: '/',
    mode: 'history',
    linkActiveClass: 'active',
    routes: [{
            path: '/',
            meta: {},
            name: 'Root',
            redirect: {
                name: 'home'
            },
            beforeEnter: ifAuthenticated
        },
        {
            path: '/home',
            name: 'home',
            component: home,
            meta: {
                breadcrumb: [
                    { name: 'Accueil' }
                ]
            },
            beforeEnter: ifRoleExist


        },
        {
            path: '/dashboard',
            name: 'dashboard',
            component: dashboard,
            meta: {
                breadcrumb: [
                    { name: 'Tableau de bord' }
                ]
            },
            beforeEnter: ifAuthenticated
        },
        {
            path: '/mailbox',
            name: 'Mailbox',
            component: Mailbox,
            meta: {
                breadcrumb: [
                    { name: 'dashboard', href: 'dashboard' },
                    { name: 'Mailbox' }
                ]
            }
        },
        {
            path: '/snackbar',
            name: 'Snackbar',
            component: Snackbar,
            meta: {
                breadcrumb: [
                    { name: 'dashboard', href: 'dashboard' },
                    { name: 'Snackbar' }
                ]
            }
        },
        {
            path: '/calendar',
            name: 'Calendar',
            component: Calendar,
            meta: {
                breadcrumb: [
                    { name: 'Tableau de bord', href: 'dashboard' },
                    { name: 'Calendar' }
                ]
            }
        },
        {
            path: '/social',
            name: 'Social',
            component: Social,
            meta: {
                breadcrumb: [
                    { name: 'dashboard', href: 'dashboard' },
                    { name: 'Social' }
                ]
            }
        },
        {
            path: '/media',
            name: 'Media',
            component: Media,
            meta: {
                breadcrumb: [
                    { name: 'dashboard', href: 'dashboard' },
                    { name: 'Media' }
                ]
            }
        },
        {
            path: '/chart',
            name: 'Chart',
            component: Chart,
            meta: {
                breadcrumb: [
                    { name: 'dashboard', href: 'dashboard' },
                    { name: 'Chart' }
                ]
            }
        },
        {
            path: '/login',
            name: 'Login',
            component: Login,
            meta: {
                allowAnonymous: true
            }
        },
        {
            path: '/users/profile',
            name: 'users_profile',
            component: UProfile,
            meta: {
                breadcrumb: [
                    { name: store.state.appName, href: 'dashboard' },
                    { name: 'Mon profil' }
                ]
            },
            beforeEnter: ifAuthenticated

        },

        {
          path: '/client/list',
          name: 'client_list',
          component: Client,
          meta: {
              breadcrumb: [
                  { name: store.state.appName, href: 'dashboard' },
                  { name: 'Liste des client' }
              ]
          },
          beforeEnter: ifAuthenticated

        },

        {
          path: '/client/add',
          name: 'client_add',
          component: ClientAdd,
          meta: {
              breadcrumb: [
                  { name: store.state.appName, href: 'dashboard' },
                  { name: 'Ajouter client' }
              ]
          },
          beforeEnter: ifAuthenticated

        },

        {
          path: '/client/update/:id',
          name: 'client_edit',
          component: ClientUpdate,
          meta: {
              breadcrumb: [
                  { name: store.state.appName, href: 'dashboard' },
                  { name: 'Details client' }
              ]
          },
          beforeEnter: ifAuthenticated

        },
        {
          path: '/account',
          name: 'account',
          component: Partenaire,
          meta: {
              breadcrumb: [
                  { name: store.state.appName, href: 'dashboard' },
                  { name: 'Mes details' }
              ]
          },
          beforeEnter: ifAuthenticated

        },


        {
          path: '/subscription',
          name: 'subscription',
          component: Abonnement,
          meta: {
              breadcrumb: [
                  { name: store.state.appName, href: 'dashboard' },
                  { name: 'Abonnements' }
              ]
          },
          beforeEnter: ifAuthenticated

        },

        {
            path: '/error',
            name: 'Error',
            component: Error,
            meta: {
                allowAnonymous: true
            }
        },
        {
            path: '/403',
            name: '403',
            component: Deny,
            meta: {
                allowAnonymous: true
            }
        }
    ]
});







